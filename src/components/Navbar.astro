---
import FlowerIcon from "./icons/FlowerShalomIcon.astro";

const navItems = [
  { title: "Inicio", label: "inicio", url: "/" },
  { title: "Servicios", label: "servicios", url: "/servicios" },
  { title: "Sobre Nosotros", label: "sobre-nosotros", url: "/sobrenosotros" },
  { title: "Contacto", label: "contacto", url: "/contacto" },
];

const currentPath = Astro.url.pathname;
---

<header class="fixed top-0 left-0 w-full z-40">
  <nav
    class="flex px-4 py-3 text-sm font-medium
      text-ts-accent
      justify-between items-center w-full max-w-7xl mx-auto
      bg-ts-background/50
      backdrop-blur-md
      shadow-lg
      ring-1 ring-ts-background/10
      rounded-full mt-4
      transition-all duration-300 ease-in-out"
    aria-label="Menú principal"
  >
    <a href="/" class="text-2xl font-bold text-ts-primary flex-shrink-0 flex items-center space-x-2">
      <FlowerIcon class="w-7 h-7 text-ts-primary" />
    </a>
    <ul class="hidden md:flex md:space-x-6 text-base">
      {
        navItems.map((link) => (
          <li>
            <a
              class={`relative block px-3 py-2 transition hover:text-ts-primary ${currentPath === link.url ? "text-ts-accent font-semibold" : "text-gray-700"}`}
              aria-label={link.label}
              href={link.url}
            >
              {link.title}
            </a>
          </li>
        ))
      }
    </ul>
    <button id="mobile-menu-button" class="md:hidden flex flex-col justify-center items-center z-50 p-2 group" aria-label="Abrir menú">
    <span class="block w-6 h-0.5 bg-ts-accent mb-1 transition-transform duration-300 ease-in-out group-[.open]:rotate-45 group-[.open]:translate-y-1"></span>
    <span class="block w-6 h-0.5 bg-ts-accent mb-1 transition-opacity duration-300 ease-in-out group-[.open]:opacity-0"></span>
    <span class="block w-6 h-0.5 bg-ts-accent transition-transform duration-300 ease-in-out group-[.open]:-rotate-45 group-[.open]:-translate-y-1"></span>
    </button>
  </nav>

  {/* Overlay */}
  <div
    id="mobile-menu-overlay"
    class="fixed inset-0 bg-black opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out z-40 md:hidden"
  >&#8203;</div>

  {/* Panel */}
  <!-- Panel móvil full screen -->
<div
  id="mobile-menu-panel"
  class="fixed inset-0 bg-ts-background-dark/95 backdrop-blur-md transform translate-x-full opacity-0 transition-all duration-300 ease-in-out md:hidden z-50 p-6 flex flex-col pt-20"
>
  <button
    id="mobile-menu-close-button"
    class="absolute top-4 right-4 text-white focus:outline-none p-2"
    aria-label="Cerrar menú"
  >
    <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
    </svg>
  </button>

  <div class="flex flex-col space-y-6 mt-8">
    {
      navItems.map((link, i) => (
        <a
          href={link.url}
          class={`text-white hover:text-ts-accent text-2xl font-semibold transition duration-300 opacity-0 translate-x-8`}
          style={`transition-delay: ${100 + i * 60}ms`}
          data-mobile-link
        >
          {link.title}
        </a>
      ))
    }
  </div>
</div>

</header>

<script is:inline>
  function initMobileMenu() {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenuPanel = document.getElementById("mobile-menu-panel");
    const mobileMenuCloseButton = document.getElementById("mobile-menu-close-button");
    const mobileMenuOverlay = document.getElementById("mobile-menu-overlay");
    if (!mobileMenuButton || !mobileMenuPanel || !mobileMenuCloseButton || !mobileMenuOverlay) return;
    const mobileLinks = mobileMenuPanel.querySelectorAll("[data-mobile-link]");

    function openMobileMenu() {
      mobileMenuPanel.classList.remove("translate-x-full", "opacity-0");
      mobileMenuPanel.classList.add("translate-x-0", "opacity-100");
      mobileMenuOverlay.classList.remove("opacity-0", "pointer-events-none");
      mobileMenuOverlay.classList.add("opacity-60", "pointer-events-auto");
      document.body.style.overflow = "hidden";
      mobileLinks.forEach((link, i) => {
        setTimeout(() => {
          link.classList.remove("opacity-0", "translate-x-8");
          link.classList.add("opacity-100", "translate-x-0");
        }, 150 + i * 60);
      });
    }

    function closeMobileMenu() {
      mobileMenuPanel.classList.remove("translate-x-0", "opacity-100");
      mobileMenuPanel.classList.add("translate-x-full", "opacity-0");
      mobileMenuOverlay.classList.remove("opacity-60", "pointer-events-auto");
      mobileMenuOverlay.classList.add("opacity-0", "pointer-events-none");
      document.body.style.overflow = "";
      mobileLinks.forEach((link) => {
        link.classList.remove("opacity-100", "translate-x-0");
        link.classList.add("opacity-0", "translate-x-8");
      });
    }

    mobileMenuButton.addEventListener("click", openMobileMenu);
    mobileMenuCloseButton.addEventListener("click", closeMobileMenu);
    mobileMenuOverlay.addEventListener("click", closeMobileMenu);
    mobileMenuPanel.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", closeMobileMenu);
    });
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768) closeMobileMenu();
    });
  }

  document.addEventListener("DOMContentLoaded", initMobileMenu);
  document.addEventListener("astro:after-swap", initMobileMenu);
</script>